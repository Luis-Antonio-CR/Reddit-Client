[{"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/index.js":"1","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/App.js":"2","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/NavBar.js":"3","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/CategoriesBar.js":"4","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/PostComponent.js":"5","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/SubredditsBar.js":"6","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/SearchBar.js":"7","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/store/store.js":"8","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/store/subRedditSlice.js":"9","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/store/redditSlice.js":"10","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/api/reddit.js":"11","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/Home.js":"12","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/utils/shortenNumber.js":"13","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/utils/getRandomNumber.js":"14","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/PostLoading.js":"15"},{"size":399,"mtime":1661263952411,"results":"16","hashOfConfig":"17"},{"size":519,"mtime":1661175333928,"results":"18","hashOfConfig":"17"},{"size":379,"mtime":1654426665856,"results":"19","hashOfConfig":"17"},{"size":435,"mtime":1654278191111,"results":"20","hashOfConfig":"17"},{"size":2174,"mtime":1661161398175,"results":"21","hashOfConfig":"17"},{"size":1422,"mtime":1661259769631,"results":"22","hashOfConfig":"17"},{"size":1030,"mtime":1660899866696,"results":"23","hashOfConfig":"17"},{"size":308,"mtime":1661175724806,"results":"24","hashOfConfig":"17"},{"size":1172,"mtime":1661260100694,"results":"25","hashOfConfig":"17"},{"size":3565,"mtime":1660898445222,"results":"26","hashOfConfig":"17"},{"size":699,"mtime":1661263602003,"results":"27","hashOfConfig":"17"},{"size":2127,"mtime":1661174835025,"results":"28","hashOfConfig":"17"},{"size":654,"mtime":1599921792000,"results":"29","hashOfConfig":"17"},{"size":179,"mtime":1599921792000,"results":"30","hashOfConfig":"17"},{"size":1278,"mtime":1661173467960,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18ord8n",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"38"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"38"},"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/index.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/App.js",[],[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/NavBar.js",["85"],[],"import logo from \"../assets/Reddit_Client_Logo.png\";\nimport SearchBar from \"./SearchBar\";\n\nconst NavBar = () => {\n    return(\n        <div className=\"navbar\" alt=\"\">\n            <div className=\"logo\">\n                <img src={logo}/>\n                <h2>Reddit Client</h2>\n            </div>\n            \n            <SearchBar />\n\n        </div>\n    )\n}\n\nexport default NavBar;","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/CategoriesBar.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/PostComponent.js",["86","87","88","89","90","91","92","93"],[],"import React, {useState} from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\nimport shortenNumber from \"../utils/shortenNumber\";\n\nimport imgPost from \"../assets/imgPost.jpeg\";\nimport arrow from \"../assets/Arrow.png\";\nimport arrowGreen from \"../assets/Green_Arrow.png\";\nimport arrowRed from \"../assets/Red_Arrow.png\";\n\nconst PostComp = (props) => {\n    const [ voteValue, setVoteValue ] = useState(0);\n    const { post, onToggleComments } = props;\n\n    const onHandleVote = (a) => {\n        if(a === voteValue) {\n            setVoteValue(0);\n        } else if (a === 1){\n            setVoteValue(1);\n        } else {\n            setVoteValue(-1);\n        }\n    }\n\n    const renderUpVote = () => {\n        if (voteValue === 1){\n            return <img src={arrowGreen} className=\"arrow_top\"/>\n        }else{\n            return <img src={arrow} className=\"arrow_top\"/>\n        }\n    }\n\n    const renderDownVote = () => {\n        if (voteValue === -1){\n            return <img src={arrowRed} className=\"arrow_bottom\"/>\n        }else{\n            return <img src={arrow} className=\"arrow_bottom\"/>\n        }\n    }\n\n    const getVoteType = () =>{\n        if(voteValue === 1){\n            return 'up-vote';\n        }\n        if(voteValue === -1){\n            return 'down-vote';\n        }\n\n        return '';\n    }\n\n    return(\n        <div className=\"postComp\">\n            <div className=\"postComp-lateral\">\n                <button type=\"button\" onClick={() => onHandleVote(1)} >\n                    {renderUpVote()}\n                </button>\n                <h3 className={`lateral_number ${getVoteType()} `}> {shortenNumber(props.ups, 1)} </h3>\n                <button type=\"button\" onClick={() => onHandleVote(-1)} >\n                    {renderDownVote()}\n                </button>\n            </div>\n            <div className=\"postComp-main\">\n                <h2 className=\"medium_text\">Title</h2>\n                <img src={imgPost}/>\n            </div>\n            <div className=\"postComp-baseline\">\n                <h3>Comments</h3>\n                <h3>Time</h3>\n                <h3>Author</h3>\n            </div>\n        </div>\n    )\n}\n\nexport default PostComp;","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/SubredditsBar.js",["94"],[],"import React, {useEffect} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchSubreddits, selectSubreddits } from \"../store/subRedditSlice\";\nimport { setSelectedSubreddit, selectSelectedSubreddit } from \"../store/redditSlice\";\n\nconst SubredditsBar = () => {\n    const dispatch = useDispatch();\n    const subreddits = useSelector(selectSubreddits);\n    const selectedSubreddit = useSelector(selectSelectedSubreddit);\n    \n    useEffect(()=> {\n        dispatch(fetchSubreddits())\n    }, [dispatch]);\n\n    return(\n        <div className=\"subbredditsBar\">\n            <h2 className=\"medium_text\">Subreddits</h2>\n            <ul>\n                {subreddits.map((subreddit) => {\n                    <li key={subreddit.id} className={`${\n                        selectedSubreddit === subreddit.url && `selected-subreddit`\n                      }`}>\n                        <button onClick={()=> dispatch(setSelectedSubreddit(subreddit.url))}>\n                            <img \n                                src={ subreddit.icon_img }\n                                alt={`${subreddit.display_name}`}\n                                className=\"subreddit_icon\"\n                            />\n                            {subreddit.display_name}\n                        </button>\n                    </li>\n                })}\n            </ul>\n        </div>\n    )\n}\n\nexport default SubredditsBar;","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/SearchBar.js",["95","96"],[],"import React, {useState, useEffect} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSearchTerm } from \"../store/redditSlice\";\n\nconst SearchBar = () => {\n    const [ searchTermLocal, setSearchTermLocal ] = useState('');\n    const searchTerm = useSelector((state) => state.reddit.searchTerm);\n    const dispatch = useDispatch();\n    \n    const handleSubmit = (e) => {\n\n        e.preventDefault();\n        dispatch(setSearchTerm(searchTermLocal));\n    }\n\n    const handleChange = (e) =>{\n        setSearchTermLocal = e.target.value;\n    }\n\n    useEffect(()=> {\n        setSearchTermLocal(searchTerm);\n    }, [searchTerm]);\n\n    return(\n        <div>\n            <form onSubmit={handleSubmit} className=\"searchBar\">\n                <input type=\"text\" className=\"searchBar-text\" onChange={handleChange} placeholder=\"Search\"/>\n                <button type=\"submit\" onClick={handleSubmit} className=\"searchBar-button\">Search</button>\n            </form>\n        </div>\n    )\n}\n\nexport default SearchBar;","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/store/store.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/store/subRedditSlice.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/store/redditSlice.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/api/reddit.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/Home.js",["97","98"],[],"import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport PostComp from \"./PostComponent\";\nimport PostLoad from \"./PostLoading\";\nimport getRandomNumber from \"../utils/getRandomNumber\";\nimport {\n    fetchPosts,\n    selectFilteredPosts,\n    setSearchTerm,\n    fetchComments\n} from \"../store/redditSlice\";\n\nconst Home = () => {\n    const reddit = useSelector((state) => state.reddit);\n    const { isLoading, error, searchTerm, selectedSubreddit } = reddit;\n    const posts = useSelector(selectFilteredPosts);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchPosts(selectedSubreddit));\n    }, [selectedSubreddit]);\n\n    const onToggleComments = (index) => {\n        const getComments = (permalink) => {\n          dispatch(fetchComments(index, permalink));\n        };\n    \n        return getComments;\n      };\n\n    if (isLoading){\n        return(\n            <div className=\"posts\" alt=\"\">\n                <PostLoad />\n                <PostLoad />\n                <PostLoad />\n                <PostLoad />\n            </div>\n        )\n    }\n\n    if (error) {\n        return(\n            <div className=\"error\">\n                <h2 className=\"medium_text\">Failed to load posts.</h2>\n                <button className=\"normal_text\" onClick={() => dispatch(fetchPosts(selectedSubreddit))}>\n                    Try again\n                </button>\n            </div>\n        )\n    }\n\n    if(posts.lenght === 0){\n        return(\n            <div className=\"error\">\n                <h2 className=\"medium_text\">No posts matching \"{searchTerm}\"</h2>\n                <button className=\"normal_text\" onClick={() => dispatch(setSearchTerm(\"\"))} >\n                    Go home\n                </button>\n            </div>\n        )\n    }\n\n    return(\n        <div className=\"posts\" alt=\"\">\n            {posts.map((post, index)=> (\n                <PostComp \n                    key={post.id}\n                    post={post}\n                    onToggleComments={onToggleComments(index)}\n                />\n            ))}\n        </div>\n    )\n}\n\nexport default Home;","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/utils/shortenNumber.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/utils/getRandomNumber.js",["99"],[],"/**\n * Generates a number between min and max.\n * @param {number} min\n * @param {number} max\n */\nexport default (min, max) => {\n  return Math.floor(Math.random() * max) + min;\n};\n","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/PostLoading.js",["100","101"],[],"import React from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\nimport getRandomNumber from \"../utils/getRandomNumber\";\n\nimport arrow from \"../assets/Arrow.png\";\n\nconst PostLoad = () => {\n    return (\n        <div className=\"postComp\">\n            <div className=\"postComp-lateral\">\n                <button type=\"button\">\n                    <img src={arrow} className=\"arrow_top\"/>\n                </button>\n                <h3>\n                    <Skeleton width={getRandomNumber(20,50)} />\n                </h3>\n                <button type=\"button\" >\n                    <img src={arrow} className=\"arrow_bottom\"/>\n                </button>\n            </div>\n            <div className=\"postComp-main\">\n                <h2 className=\"medium_text\">\n                    <Skeleton width={getRandomNumber(100, 200)} />\n                </h2>\n                <Skeleton height={250}/>\n            </div>\n            <div className=\"postComp-baseline\">\n                <h3>Comments</h3>\n                <h3>\n                    <Skeleton width={getRandomNumber(20,50)} />\n                </h3>\n                <h3>\n                    <Skeleton width={getRandomNumber(50, 100)} />\n                </h3>\n            </div>\n        </div>\n    )\n}\n\nexport default PostLoad;",{"ruleId":"102","severity":1,"message":"103","line":8,"column":17,"nodeType":"104","endLine":8,"endColumn":34},{"ruleId":"105","severity":1,"message":"106","line":2,"column":8,"nodeType":"107","messageId":"108","endLine":2,"endColumn":16},{"ruleId":"105","severity":1,"message":"109","line":12,"column":13,"nodeType":"107","messageId":"108","endLine":12,"endColumn":17},{"ruleId":"105","severity":1,"message":"110","line":12,"column":19,"nodeType":"107","messageId":"108","endLine":12,"endColumn":35},{"ruleId":"102","severity":1,"message":"103","line":26,"column":20,"nodeType":"104","endLine":26,"endColumn":65},{"ruleId":"102","severity":1,"message":"103","line":28,"column":20,"nodeType":"104","endLine":28,"endColumn":60},{"ruleId":"102","severity":1,"message":"103","line":34,"column":20,"nodeType":"104","endLine":34,"endColumn":66},{"ruleId":"102","severity":1,"message":"103","line":36,"column":20,"nodeType":"104","endLine":36,"endColumn":63},{"ruleId":"102","severity":1,"message":"103","line":64,"column":17,"nodeType":"104","endLine":64,"endColumn":37},{"ruleId":"111","severity":1,"message":"112","line":19,"column":45,"nodeType":"113","messageId":"114","endLine":19,"endColumn":47},{"ruleId":"115","severity":1,"message":"116","line":17,"column":9,"nodeType":"107","messageId":"117","endLine":17,"endColumn":27},{"ruleId":"118","severity":1,"message":"119","line":22,"column":8,"nodeType":"120","endLine":22,"endColumn":20,"suggestions":"121"},{"ruleId":"105","severity":1,"message":"122","line":6,"column":8,"nodeType":"107","messageId":"108","endLine":6,"endColumn":23},{"ruleId":"118","severity":1,"message":"123","line":22,"column":8,"nodeType":"120","endLine":22,"endColumn":27,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":6,"column":1,"nodeType":"127","endLine":8,"endColumn":3},{"ruleId":"102","severity":1,"message":"103","line":12,"column":21,"nodeType":"104","endLine":12,"endColumn":61},{"ruleId":"102","severity":1,"message":"103","line":18,"column":21,"nodeType":"104","endLine":18,"endColumn":64},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Skeleton' is defined but never used.","Identifier","unusedVar","'post' is assigned a value but never used.","'onToggleComments' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-const-assign","'setSearchTermLocal' is constant.","const","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setSearchTermLocal'. Either include it or remove the dependency array.","ArrayExpression",["128"],"'getRandomNumber' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["129"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [searchTerm, setSearchTermLocal]",{"range":"134","text":"135"},"Update the dependencies array to be: [dispatch, selectedSubreddit]",{"range":"136","text":"137"},[639,651],"[searchTerm, setSearchTermLocal]",[669,688],"[dispatch, selectedSubreddit]"]