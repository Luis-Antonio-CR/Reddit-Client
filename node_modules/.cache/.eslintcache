[{"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/index.js":"1","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/App.js":"2","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/NavBar.js":"3","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/CategoriesBar.js":"4","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/PostComponent.js":"5","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/SubredditsBar.js":"6","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/SearchBar.js":"7","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/store/store.js":"8","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/store/subRedditSlice.js":"9","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/store/redditSlice.js":"10","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/api/reddit.js":"11","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/Home.js":"12","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/utils/shortenNumber.js":"13","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/utils/getRandomNumber.js":"14","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/PostLoading.js":"15"},{"size":399,"mtime":1661263952411,"results":"16","hashOfConfig":"17"},{"size":519,"mtime":1661175333928,"results":"18","hashOfConfig":"17"},{"size":379,"mtime":1654426665856,"results":"19","hashOfConfig":"17"},{"size":435,"mtime":1654278191111,"results":"20","hashOfConfig":"17"},{"size":2302,"mtime":1661265968426,"results":"21","hashOfConfig":"17"},{"size":1422,"mtime":1661259769631,"results":"22","hashOfConfig":"17"},{"size":1030,"mtime":1660899866696,"results":"23","hashOfConfig":"17"},{"size":308,"mtime":1661175724806,"results":"24","hashOfConfig":"17"},{"size":1172,"mtime":1661260100694,"results":"25","hashOfConfig":"17"},{"size":3564,"mtime":1661265313192,"results":"26","hashOfConfig":"17"},{"size":707,"mtime":1661264685751,"results":"27","hashOfConfig":"17"},{"size":2127,"mtime":1661174835025,"results":"28","hashOfConfig":"17"},{"size":654,"mtime":1599921792000,"results":"29","hashOfConfig":"17"},{"size":179,"mtime":1599921792000,"results":"30","hashOfConfig":"17"},{"size":1278,"mtime":1661173467960,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18ord8n",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"38"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"38"},"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/index.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/App.js",[],[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/NavBar.js",["84"],[],"import logo from \"../assets/Reddit_Client_Logo.png\";\nimport SearchBar from \"./SearchBar\";\n\nconst NavBar = () => {\n    return(\n        <div className=\"navbar\" alt=\"\">\n            <div className=\"logo\">\n                <img src={logo}/>\n                <h2>Reddit Client</h2>\n            </div>\n            \n            <SearchBar />\n\n        </div>\n    )\n}\n\nexport default NavBar;","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/CategoriesBar.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/PostComponent.js",["85","86","87","88","89","90","91"],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/SubredditsBar.js",["92"],[],"import React, {useEffect} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchSubreddits, selectSubreddits } from \"../store/subRedditSlice\";\nimport { setSelectedSubreddit, selectSelectedSubreddit } from \"../store/redditSlice\";\n\nconst SubredditsBar = () => {\n    const dispatch = useDispatch();\n    const subreddits = useSelector(selectSubreddits);\n    const selectedSubreddit = useSelector(selectSelectedSubreddit);\n    \n    useEffect(()=> {\n        dispatch(fetchSubreddits())\n    }, [dispatch]);\n\n    return(\n        <div className=\"subbredditsBar\">\n            <h2 className=\"medium_text\">Subreddits</h2>\n            <ul>\n                {subreddits.map((subreddit) => {\n                    <li key={subreddit.id} className={`${\n                        selectedSubreddit === subreddit.url && `selected-subreddit`\n                      }`}>\n                        <button onClick={()=> dispatch(setSelectedSubreddit(subreddit.url))}>\n                            <img \n                                src={ subreddit.icon_img }\n                                alt={`${subreddit.display_name}`}\n                                className=\"subreddit_icon\"\n                            />\n                            {subreddit.display_name}\n                        </button>\n                    </li>\n                })}\n            </ul>\n        </div>\n    )\n}\n\nexport default SubredditsBar;","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/SearchBar.js",["93","94"],[],"import React, {useState, useEffect} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSearchTerm } from \"../store/redditSlice\";\n\nconst SearchBar = () => {\n    const [ searchTermLocal, setSearchTermLocal ] = useState('');\n    const searchTerm = useSelector((state) => state.reddit.searchTerm);\n    const dispatch = useDispatch();\n    \n    const handleSubmit = (e) => {\n\n        e.preventDefault();\n        dispatch(setSearchTerm(searchTermLocal));\n    }\n\n    const handleChange = (e) =>{\n        setSearchTermLocal = e.target.value;\n    }\n\n    useEffect(()=> {\n        setSearchTermLocal(searchTerm);\n    }, [searchTerm]);\n\n    return(\n        <div>\n            <form onSubmit={handleSubmit} className=\"searchBar\">\n                <input type=\"text\" className=\"searchBar-text\" onChange={handleChange} placeholder=\"Search\"/>\n                <button type=\"submit\" onClick={handleSubmit} className=\"searchBar-button\">Search</button>\n            </form>\n        </div>\n    )\n}\n\nexport default SearchBar;","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/store/store.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/store/subRedditSlice.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/store/redditSlice.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/api/reddit.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/Home.js",["95","96"],[],"import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport PostComp from \"./PostComponent\";\nimport PostLoad from \"./PostLoading\";\nimport getRandomNumber from \"../utils/getRandomNumber\";\nimport {\n    fetchPosts,\n    selectFilteredPosts,\n    setSearchTerm,\n    fetchComments\n} from \"../store/redditSlice\";\n\nconst Home = () => {\n    const reddit = useSelector((state) => state.reddit);\n    const { isLoading, error, searchTerm, selectedSubreddit } = reddit;\n    const posts = useSelector(selectFilteredPosts);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchPosts(selectedSubreddit));\n    }, [selectedSubreddit]);\n\n    const onToggleComments = (index) => {\n        const getComments = (permalink) => {\n          dispatch(fetchComments(index, permalink));\n        };\n    \n        return getComments;\n      };\n\n    if (isLoading){\n        return(\n            <div className=\"posts\" alt=\"\">\n                <PostLoad />\n                <PostLoad />\n                <PostLoad />\n                <PostLoad />\n            </div>\n        )\n    }\n\n    if (error) {\n        return(\n            <div className=\"error\">\n                <h2 className=\"medium_text\">Failed to load posts.</h2>\n                <button className=\"normal_text\" onClick={() => dispatch(fetchPosts(selectedSubreddit))}>\n                    Try again\n                </button>\n            </div>\n        )\n    }\n\n    if(posts.lenght === 0){\n        return(\n            <div className=\"error\">\n                <h2 className=\"medium_text\">No posts matching \"{searchTerm}\"</h2>\n                <button className=\"normal_text\" onClick={() => dispatch(setSearchTerm(\"\"))} >\n                    Go home\n                </button>\n            </div>\n        )\n    }\n\n    return(\n        <div className=\"posts\" alt=\"\">\n            {posts.map((post, index)=> (\n                <PostComp \n                    key={post.id}\n                    post={post}\n                    onToggleComments={onToggleComments(index)}\n                />\n            ))}\n        </div>\n    )\n}\n\nexport default Home;","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/utils/shortenNumber.js",[],[],"/Users/luisantonio/Documents/GitHub/Reddit-Client/src/utils/getRandomNumber.js",["97"],[],"/**\n * Generates a number between min and max.\n * @param {number} min\n * @param {number} max\n */\nexport default (min, max) => {\n  return Math.floor(Math.random() * max) + min;\n};\n","/Users/luisantonio/Documents/GitHub/Reddit-Client/src/components/PostLoading.js",["98","99"],[],"import React from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\nimport getRandomNumber from \"../utils/getRandomNumber\";\n\nimport arrow from \"../assets/Arrow.png\";\n\nconst PostLoad = () => {\n    return (\n        <div className=\"postComp\">\n            <div className=\"postComp-lateral\">\n                <button type=\"button\">\n                    <img src={arrow} className=\"arrow_top\"/>\n                </button>\n                <h3>\n                    <Skeleton width={getRandomNumber(20,50)} />\n                </h3>\n                <button type=\"button\" >\n                    <img src={arrow} className=\"arrow_bottom\"/>\n                </button>\n            </div>\n            <div className=\"postComp-main\">\n                <h2 className=\"medium_text\">\n                    <Skeleton width={getRandomNumber(100, 200)} />\n                </h2>\n                <Skeleton height={250}/>\n            </div>\n            <div className=\"postComp-baseline\">\n                <h3>Comments</h3>\n                <h3>\n                    <Skeleton width={getRandomNumber(20,50)} />\n                </h3>\n                <h3>\n                    <Skeleton width={getRandomNumber(50, 100)} />\n                </h3>\n            </div>\n        </div>\n    )\n}\n\nexport default PostLoad;",{"ruleId":"100","severity":1,"message":"101","line":8,"column":17,"nodeType":"102","endLine":8,"endColumn":34},{"ruleId":"103","severity":1,"message":"104","line":2,"column":8,"nodeType":"105","messageId":"106","endLine":2,"endColumn":16},{"ruleId":"103","severity":1,"message":"107","line":6,"column":8,"nodeType":"105","messageId":"106","endLine":6,"endColumn":15},{"ruleId":"103","severity":1,"message":"108","line":13,"column":19,"nodeType":"105","messageId":"106","endLine":13,"endColumn":35},{"ruleId":"100","severity":1,"message":"101","line":27,"column":20,"nodeType":"102","endLine":27,"endColumn":65},{"ruleId":"100","severity":1,"message":"101","line":29,"column":20,"nodeType":"102","endLine":29,"endColumn":60},{"ruleId":"100","severity":1,"message":"101","line":35,"column":20,"nodeType":"102","endLine":35,"endColumn":66},{"ruleId":"100","severity":1,"message":"101","line":37,"column":20,"nodeType":"102","endLine":37,"endColumn":63},{"ruleId":"109","severity":1,"message":"110","line":19,"column":45,"nodeType":"111","messageId":"112","endLine":19,"endColumn":47},{"ruleId":"113","severity":1,"message":"114","line":17,"column":9,"nodeType":"105","messageId":"115","endLine":17,"endColumn":27},{"ruleId":"116","severity":1,"message":"117","line":22,"column":8,"nodeType":"118","endLine":22,"endColumn":20,"suggestions":"119"},{"ruleId":"103","severity":1,"message":"120","line":6,"column":8,"nodeType":"105","messageId":"106","endLine":6,"endColumn":23},{"ruleId":"116","severity":1,"message":"121","line":22,"column":8,"nodeType":"118","endLine":22,"endColumn":27,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":6,"column":1,"nodeType":"125","endLine":8,"endColumn":3},{"ruleId":"100","severity":1,"message":"101","line":12,"column":21,"nodeType":"102","endLine":12,"endColumn":61},{"ruleId":"100","severity":1,"message":"101","line":18,"column":21,"nodeType":"102","endLine":18,"endColumn":64},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Skeleton' is defined but never used.","Identifier","unusedVar","'imgPost' is defined but never used.","'onToggleComments' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-const-assign","'setSearchTermLocal' is constant.","const","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setSearchTermLocal'. Either include it or remove the dependency array.","ArrayExpression",["126"],"'getRandomNumber' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["127"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"Update the dependencies array to be: [searchTerm, setSearchTermLocal]",{"range":"132","text":"133"},"Update the dependencies array to be: [dispatch, selectedSubreddit]",{"range":"134","text":"135"},[639,651],"[searchTerm, setSearchTermLocal]",[669,688],"[dispatch, selectedSubreddit]"]